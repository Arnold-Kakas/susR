% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_susr_data.R
\name{fetch_susr_data}
\alias{fetch_susr_data}
\title{Retrieve data from SUSR (Slovak Statistical Office) open data API as data frames}
\usage{
fetch_susr_data(
  params,
  lang = "en",
  base_url = "https://data.statistics.sk/api/v2/dataset"
)
}
\arguments{
\item{params}{A list structured in \strong{pairs}:
\enumerate{
\item A character string with the table code (e.g. "np3106rr").
\item A list (or vector) of dimension "segments" in the order they should
appear in the URL. Each segment can be:
\itemize{
\item A character scalar (e.g. "SK021"), or
\item A character vector (e.g. \code{c("2016","2017","2018")})
which we join by commas (\code{"2016,2017,2018"}),
\item Special keywords like \code{"all"}, \code{"last5"}, etc.
(passed as-is).
}
}
For multiple tables, just keep repeating those pairs in the same list.}

\item{lang}{The language code. Defaults to \code{"en"}. Can also be \code{"sk"}.}

\item{base_url}{The base SUSR dataset endpoint. Defaults to
\code{"https://data.statistics.sk/api/v2/dataset"}.}
}
\value{
A \emph{named list of data frames}, keyed by the table codes. If you request
data for two tables (e.g. "np3106rr" and "as1001rs"), you get a list of two
tibbles. For example:
\preformatted{
    $np3106rr
      # A tibble with columns for the dimension categories and the measured value

    $as1001rs
      # Another tibble for that table
  }
}
\description{
This function constructs and calls the dataset endpoint for one or more tables,
including their dimension selections, and returns each as a data frame (tibble).
Internally, it fetches JSON-stat and parses it using the \pkg{rjstat} package.
}
\details{
The \strong{order} of dimension segments is crucial. For example, if the
official URL pattern is:
\preformatted{
  https://data.statistics.sk/api/v2/dataset/<table_code>/<param1>/<param2>/<param3>?lang=en&type=json
}
then pass \code{list("param1", "param2", "param3")} in that \emph{exact} order.

Internally, each JSON-stat response is converted to a data frame (tibble)
using \code{rjstat::fromJSONstat()}. If the JSON structure is invalid or
the API call fails, we store \code{NULL} and emit a warning for that table.
}
\examples{
\dontrun{
# Example: retrieve data from two tables
params <- list(
  "np3106rr",
  list("SK021", c("2016","2017","2018"), "E_PRIEM_HR_MZDA", "7"),
  "as1001rs",
  list("all", "all", "all")  # e.g. get all years, all other dims
)

res <- fetch_susr_data(params, lang = "en")
names(res)
#> [1] "np3106rr" "as1001rs"

# Each element is a data frame. For example:
head(res[["np3106rr"]])
}

}
